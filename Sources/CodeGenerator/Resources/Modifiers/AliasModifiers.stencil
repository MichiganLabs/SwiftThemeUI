struct AccentColorModifier: ViewModifier, ThemeModifier {
  @Environment(\.currentTheme) var theme: ThemeModeType

  let alias: KeyPath<ThemeModeType, Color>

  @ViewBuilder
  func body(content: Content) -> some View {
    content.accentColor(self.element)
  }
}

struct ForegroundModifier: ViewModifier, ThemeModifier {
  @Environment(\.currentTheme) var theme: ThemeModeType

  let alias: KeyPath<ThemeModeType, Color>

  @ViewBuilder
  func body(content: Content) -> some View {
    content.foregroundColor(self.element)
  }
}

struct CornerRadiusModifier: ViewModifier, ThemeModifier {
  @Environment(\.currentTheme) var theme: ThemeModeType

  let alias: KeyPath<ThemeModeType, CGFloat>

  @ViewBuilder
  func body(content: Content) -> some View {
    content.cornerRadius(self.element)
  }
}

struct FontModifier: ViewModifier, ThemeModifier {
  @Environment(\.currentTheme) var theme: ThemeModeType

  let alias: KeyPath<ThemeModeType, Font>

  @ViewBuilder
  func body(content: Content) -> some View {
    content.font(self.element)
  }
}

struct BackgroundModifier: ViewModifier, ThemeModifier {
  @Environment(\.currentTheme) var theme: ThemeModeType

  let alias: KeyPath<ThemeModeType, Color>

  @ViewBuilder
  func body(content: Content) -> some View {
    content.background(self.element)
  }
}

struct FillModifier: ViewModifier, ThemeModifier {
  @Environment(\.currentTheme) var theme: ThemeModeType

  let alias: KeyPath<ThemeModeType, Color>

  @ViewBuilder
  func body(content: Content) -> some View {
    content.fill(self.element)
  }
}

struct TintModifier: ViewModifier, ThemeModifier {
  @Environment(\.currentTheme) var theme: ThemeModeType

  let alias: KeyPath<ThemeModeType, Color>

  @ViewBuilder
  func body(content: Content) -> some View {
    content.tint(self.element)
  }
}

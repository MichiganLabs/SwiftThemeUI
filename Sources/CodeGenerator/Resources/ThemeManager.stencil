public enum ThemeType {
  case dynamic(light: ThemeModeType, dark: ThemeModeType)
  case `static`(ThemeModeType)
}

/// ThemeManager helps manage the themes of your application. To get started, simply instantiate ThemeManager and
/// provide the manager to the root view of your application using the `.themeManaging()` view modifier.
public class ThemeManager: ObservableObject {
  /// The currently selected theme mode. To update the theme, set `theme` with your desired effect.
  @Published public private(set) var current: ThemeModeType

  /// Drives the `current` theme and how/when it is updated.
  @Published public var theme: ThemeType {
    didSet {
      self.updateCurrentTheme()
    }
  }

  /// The current `colorScheme` of the system.
  private var systemColorScheme: ColorScheme = .light {
    didSet {
      self.updateCurrentTheme()
    }
  }

  public init(_ theme: ThemeType) {
    self.theme = theme
    self.current = Self.determineCurrentTheme(theme: theme, colorScheme: self.systemColorScheme)
  }
}

// MARK: Internal Package util functions
extension ThemeManager {
  /// Update the `ThemeManager` when the color scheme of the application changes. This will allow `ThemeManager`
  /// to automatically adjust the current theme to match the color scheme change.
  func update(from colorScheme: ColorScheme) {
    self.systemColorScheme = colorScheme
  }

  private func updateCurrentTheme() {
    self.current = Self.determineCurrentTheme(theme: self.theme, colorScheme: self.systemColorScheme)
  }

  private static func determineCurrentTheme(theme: ThemeType, colorScheme: ColorScheme) -> ThemeModeType {
    switch theme {
    case .dynamic(let light, let dark):
      switch colorScheme {
      case .light:
        return light
      case .dark:
        return dark
      @unknown default:
        return light
      }
    case .static(let palette):
      return palette
    }
  }
}
